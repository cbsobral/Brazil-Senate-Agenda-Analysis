library(ggrepel)
library(ggplot2)
library(tidyverse)
library(tidytext)
library(quanteda)
library(quanteda.textmodels)
library(stm)
# Load senators data frame
load('data/sen_df.Rda')
glimpse(sen_df)
# Load speeches data frame
load('data/speech_df.Rda')
glimpse(speech_df)
# Corpus
corp_sen <- corpus(speech_df, docid_field = 'CodigoPronunciamento',
text_field = 'Pronunciamento')
# DFM
dfmat_sen <- dfm(corp_sen,
tolower = TRUE,
remove_punct = TRUE,
remove = stopwords('portuguese'),
remove_numbers = TRUE,
remove_separators = TRUE,
remove_symbols = TRUE,
stem = FALSE,
groups = 'Partido')
# Additional stopwords
stopwords1 <- c('presidente', 'exa', 'excelencia', 'senhor', 'aqui', 'porque', 'ser',
'então', 'quero', 'vai', 'ainda', 'ter', 'pode', 'bem', 'obrigado',
'assim', 'dessa', 'srs', 'cada', 'portanto', 'outro', 'toda', 'além',
'nesse', 'nesta', 'desta', 'deste', 'disso', 'sra', 'pois', 'nó', 'sr',
'aí', 'senador', 'senadores')
# Remove additional stopwords
dfmat_sen <- dfm_remove(dfmat_sen, stopwords1)
# Set minumum number of characters
dfmat_sen <- dfm_select(dfmat_sen, min_nchar = 2)
# Name documents
docnames(dfmat_sen) <- paste(dfmat_sen$Partido)
# Summary
head(dfm_sort(dfmat_sen, decreasing = TRUE, margin = 'both'), n = 10, nf = 5)
# Table
sen_df %>%
group_by(party_abbr, gender) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(prop = (n / sum(n))*100) %>%
DT::datatable()
# Plot senators by gender
gender_sen <- sen_df %>%
group_by(party_abbr, gender) %>%
summarise(n = n()) %>%
ggplot(aes(party_abbr, n)) +
geom_col(aes(fill = gender)) +
ylab('# Senators') +
theme_classic() +
theme(axis.text.x = element_text(angle = 90))
# Plot speeches by gender
gender_speech <- speech_df %>%
group_by(Partido, Gender) %>%
summarise(n = n()) %>%
ggplot(aes(Partido, n)) +
geom_col(aes(fill = Gender)) +
ylab('# Speeches') +
theme_classic() +
theme(axis.text.x = element_text(angle = 90))
gridExtra::grid.arrange(gender_sen, gender_speech)
# Plot senators by state
# https://www25.senado.leg.br/web/senadores/por-uf/-/uf/RR -- RR 2 senadores
state_sen <- sen_df %>%
group_by(state, gender) %>%
summarise(n = n()) %>%
ggplot(aes(state, n)) +
geom_col(aes(fill = gender)) +
ylab('# Senators') +
theme_classic()
# Plot speeches by state
state_speech <- speech_df %>%
group_by(UfParlamentarNaData, Gender) %>%
summarise(n = n()) %>%
ggplot(aes(UfParlamentarNaData, n)) +
geom_col(aes(fill = Gender)) +
ylab('# Speeches') +
theme_classic()
gridExtra::grid.arrange(state_sen, state_speech)
textplot_keyness(textstat_keyness(dfmat_sen, target = dfmat_sen$Partido == 'PSL'))
# Print doc 20
dfmat_sen[20, 1] # PT
# Print doc 11
dfmat_sen[11, 1] # PR
# Wordfish model
wf <- textmodel_wordfish(dfmat_sen, dir = c(20, 11), sparse = TRUE)
# Graph party positions
textplot_scale1d(wf)
# Table with party position from external sources
load('../tada/data/wiki_partidos.Rda')
wiki_partidos %>%
DT::datatable()
# Features usage left/right
feat <- data.frame(
word = wf$features,
beta = wf$beta,
psi = wf$psi,
stringsAsFactors = FALSE)
# Graph top 30 psi per beta
# word fixed effects -- capture the fact that some words are used much more often than other words by all actors
feat %>%
top_n(30, psi) %>%
ggplot(aes(x = beta, y = psi, label = word)) +
geom_point() +
geom_text_repel() +
theme_classic()
# Left
feat_t <- feat %>%
top_n(-20, beta)
# Right
feat_r <- feat %>%
top_n(20, beta)
rbind(feat_t, feat_r) %>%
arrange(beta) %>%
mutate(word = factor(word, levels = word)) %>%
ggplot(aes(x = word, y = beta)) +
geom_col() +
coord_flip() +
theme_classic()
# Create Dictionary
# -- economy words from policy_agendas_english --
policy.lexicon <- dictionary(file = 'data/policy_agendas_english.lcd')
theme.lexicon <- dictionary(list(economy = c('econom*', 'desempreg*', 'inflação', 'demanda', 'oferta', 'negócios', 'empreg*', 'preço*', 'banco', 'dinheiro', 'gastos', 'dívida', 'juro*', 'control*', 'custo*', 'produtividade', 'índice', 'renda', 'pib', 'produto', 'bruto', 'empreg*', 'trabalh*', 'privat*'), social = c('mulher*', 'home*', 'famíl*', 'famil*', 'sex*')))
# Create DFM with theme.lexicon, apply weights and convert to data frame
theme_df  <- dfm(corp_sen, dictionary = theme.lexicon) %>%
dfm_weight(scheme = 'prop') %>%
convert('data.frame')
# List with documents about economy
econ_id <- theme_df %>%
filter(economy > 0.9) %>%
pull(doc_id)
# DFM with econ documents
dfmat_econ <- speech_df %>%
subset(CodigoPronunciamento %in% econ_id) %>%
corpus(docid_field = 'CodigoPronunciamento', text_field = 'Pronunciamento') %>%
dfm(tolower = TRUE,
remove_punct = TRUE,
remove = stopwords('portuguese'),
remove_numbers = TRUE,
remove_separators = TRUE,
remove_symbols = TRUE,
stem = FALSE,
groups = 'Partido')
# Wordfish for econ
dfmat_econ[20, 1]
dfmat_econ[11, 1]
wf_econ <- textmodel_wordfish(dfmat_econ, dir = c(20, 11), sparse = TRUE)
textplot_scale1d(wf_econ)
# Features usage left/right
feat_econ <- data.frame(
word = wf_econ$features,
beta = wf_econ$beta,
psi = wf_econ$psi,
stringsAsFactors = FALSE)
# Graph top 30 psi per beta
feat_econ %>%
top_n(30, psi) %>%  # word fixed-effects
ggplot(aes(x = beta, y = psi, label = word)) +
geom_point() +
geom_text_repel() +
theme_classic()
# Left
econ_t <- feat_econ %>%
top_n(-20, beta)
# Right
econ_r <- feat_econ %>%
top_n(20, beta)
rbind(econ_t, econ_r) %>%
arrange(beta) %>%
mutate(word = factor(word, levels = word)) %>%
ggplot(aes(x = word, y = beta)) +
geom_col() +
coord_flip() +
theme_classic()
textplot_keyness(textstat_keyness(dfmat_econ, target = dfmat_sen$Partido == 'PR'))
theme.lexicon <- dictionary(list(economy = c('econom*', 'desempreg*', 'inflação', 'demanda', 'oferta', 'negócios', 'empreg*', 'preço*', 'banco', 'dinheiro', 'gastos', 'dívida', 'juro*', 'control*', 'custo*', 'produtividade', 'índice', 'renda', 'pib', 'produto', 'bruto', 'empreg*', 'trabalh*', 'privat*'), gendfam = c('famíl*', 'famil*', 'just*', 'mulher*', 'solteir*', 'sex*', 'pai*', 'mãe', 'filh*', 'abprt*', 'criança*', 'abrigo', 'gênero', 'gay', 'kit gay', 'jove*', 'juventude', 'tradicional')))
# Create DFM with theme.lexicon, apply weights and convert to data frame
theme_df  <- dfm(corp_sen, dictionary = theme.lexicon) %>%
dfm_weight(scheme = 'prop') %>%
convert('data.frame')
# List with documents about economy
econ_id <- theme_df %>%
filter(economy > 0.9) %>%
pull(doc_id)
# DFM with econ documents
dfmat_econ <- speech_df %>%
subset(CodigoPronunciamento %in% econ_id) %>%
corpus(docid_field = 'CodigoPronunciamento', text_field = 'Pronunciamento') %>%
dfm(tolower = TRUE,
remove_punct = TRUE,
remove = stopwords('portuguese'),
remove_numbers = TRUE,
remove_separators = TRUE,
remove_symbols = TRUE,
stem = FALSE,
groups = 'Partido')
# Wordfish for econ
dfmat_econ[20, 1]
dfmat_econ[11, 1]
wf_econ <- textmodel_wordfish(dfmat_econ, dir = c(20, 11), sparse = TRUE)
textplot_scale1d(wf_econ)
# Features usage left/right
feat_econ <- data.frame(
word = wf_econ$features,
beta = wf_econ$beta,
psi = wf_econ$psi,
stringsAsFactors = FALSE)
# Graph top 30 psi per beta
feat_econ %>%
top_n(30, psi) %>%  # word fixed-effects
ggplot(aes(x = beta, y = psi, label = word)) +
geom_point() +
geom_text_repel() +
theme_classic()
# Left
econ_t <- feat_econ %>%
top_n(-20, beta)
# Right
econ_r <- feat_econ %>%
top_n(20, beta)
rbind(econ_t, econ_r) %>%
arrange(beta) %>%
mutate(word = factor(word, levels = word)) %>%
ggplot(aes(x = word, y = beta)) +
geom_col() +
coord_flip() +
theme_classic()
textplot_keyness(textstat_keyness(dfmat_econ, target = dfmat_sen$Partido == 'PR'))
textplot_keyness(textstat_keyness(dfmat_econ, target = dfmat_sen$Partido == 'PR'))
knitr::opts_chunk$set(echo = TRUE)x
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggrepel)
library(ggplot2)
library(tidyverse)
library(tidytext)
library(quanteda)
library(quanteda.textmodels)
library(stm)
# Load senators data frame
load('data/sen_df.Rda')
glimpse(sen_df)
# Load speeches data frame
load('data/speech_df.Rda')
glimpse(speech_df)
# Corpus
corp_sen <- corpus(speech_df, docid_field = 'CodigoPronunciamento',
text_field = 'Pronunciamento')
# DFM
dfmat_sen <- dfm(corp_sen,
tolower = TRUE,
remove_punct = TRUE,
remove = stopwords('portuguese'),
remove_numbers = TRUE,
remove_separators = TRUE,
remove_symbols = TRUE,
stem = FALSE,
groups = 'Partido')
# Additional stopwords
stopwords1 <- c('presidente', 'exa', 'excelencia', 'senhor', 'aqui', 'porque', 'ser',
'então', 'quero', 'vai', 'ainda', 'ter', 'pode', 'bem', 'obrigado',
'assim', 'dessa', 'srs', 'cada', 'portanto', 'outro', 'toda', 'além',
'nesse', 'nesta', 'desta', 'deste', 'disso', 'sra', 'pois', 'nó', 'sr',
'aí', 'senador', 'senadores')
# Remove additional stopwords
dfmat_sen <- dfm_remove(dfmat_sen, stopwords1)
# Set minumum number of characters
dfmat_sen <- dfm_select(dfmat_sen, min_nchar = 2)
# Name documents
docnames(dfmat_sen) <- paste(dfmat_sen$Partido)
# Summary
head(dfm_sort(dfmat_sen, decreasing = TRUE, margin = 'both'), n = 10, nf = 5)
# Table
sen_df %>%
group_by(party_abbr, gender) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(prop = (n / sum(n))*100) %>%
DT::datatable()
# Plot senators by gender
gender_sen <- sen_df %>%
group_by(party_abbr, gender) %>%
summarise(n = n()) %>%
ggplot(aes(party_abbr, n)) +
geom_col(aes(fill = gender)) +
ylab('# Senators') +
theme_classic() +
theme(axis.text.x = element_text(angle = 90))
# Plot speeches by gender
gender_speech <- speech_df %>%
group_by(Partido, Gender) %>%
summarise(n = n()) %>%
ggplot(aes(Partido, n)) +
geom_col(aes(fill = Gender)) +
ylab('# Speeches') +
theme_classic() +
theme(axis.text.x = element_text(angle = 90))
gridExtra::grid.arrange(gender_sen, gender_speech)
# Plot senators by state
# https://www25.senado.leg.br/web/senadores/por-uf/-/uf/RR -- RR 2 senadores
state_sen <- sen_df %>%
group_by(state, gender) %>%
summarise(n = n()) %>%
ggplot(aes(state, n)) +
geom_col(aes(fill = gender)) +
ylab('# Senators') +
theme_classic()
# Plot speeches by state
state_speech <- speech_df %>%
group_by(UfParlamentarNaData, Gender) %>%
summarise(n = n()) %>%
ggplot(aes(UfParlamentarNaData, n)) +
geom_col(aes(fill = Gender)) +
ylab('# Speeches') +
theme_classic()
gridExtra::grid.arrange(state_sen, state_speech)
textplot_keyness(textstat_keyness(dfmat_sen, target = dfmat_sen$Partido == 'PSL'))
textplot_keyness(textstat_keyness(dfmat_sen, target = dfmat_sen$Partido == 'PSDB'))
textplot_keyness(textstat_keyness(dfmat_sen, target = dfmat_sen$Partido == 'PSL'))
textplot_keyness(textstat_keyness(dfmat_sen, target = dfmat_sen$Partido == 'PT'))
textplot_keyness(textstat_keyness(dfmat_sen, target = dfmat_sen$Partido == 'PSDB'))
# Print doc 20
dfmat_sen[20, 1] # PT
# Print doc 11
dfmat_sen[11, 1] # PR
# Wordfish model
wf <- textmodel_wordfish(dfmat_sen, dir = c(20, 11), sparse = TRUE)
# Graph party positions
textplot_scale1d(wf)
# Table with party position from external sources
load('../tada/data/wiki_partidos.Rda')
wiki_partidos %>%
DT::datatable()
# Features usage left/right
feat <- data.frame(
word = wf$features,
beta = wf$beta,
psi = wf$psi,
stringsAsFactors = FALSE)
# Graph top 30 psi per beta
# word fixed effects -- capture the fact that some words are used much more often than other words by all actors
feat %>%
top_n(30, psi) %>%
ggplot(aes(x = beta, y = psi, label = word)) +
geom_point() +
geom_text_repel() +
theme_classic()
# Left
feat_t <- feat %>%
top_n(-20, beta)
# Right
feat_r <- feat %>%
top_n(20, beta)
rbind(feat_t, feat_r) %>%
arrange(beta) %>%
mutate(word = factor(word, levels = word)) %>%
ggplot(aes(x = word, y = beta)) +
geom_col() +
coord_flip() +
theme_classic()
# Create Dictionary
# -- economy words from policy_agendas_english --
policy.lexicon <- dictionary(file = 'data/policy_agendas_english.lcd')
theme.lexicon <- dictionary(list(economy = c('econom*', 'desempreg*', 'inflação', 'demanda', 'oferta', 'negócios', 'empreg*', 'preço*', 'banco', 'dinheiro', 'gastos', 'dívida', 'juro*', 'control*', 'custo*', 'produtividade', 'índice', 'renda', 'pib', 'produto', 'bruto', 'empreg*', 'trabalh*', 'privat*'), genfam = c('famíl*', 'famil*', 'just*', 'mulher*', 'solteir*', 'sex*', 'pai*', 'mãe', 'filh*', 'abort*', 'criança*', 'abrigo', 'gênero', 'gay', 'kit gay', 'jove*', 'juventude', 'tradicional')))
# Create DFM with theme.lexicon, apply weights and convert to data frame
theme_df  <- dfm(corp_sen, dictionary = theme.lexicon) %>%
dfm_weight(scheme = 'prop') %>%
convert('data.frame')
View(policy.lexicon)
# Create DFM with theme.lexicon, apply weights and convert to data frame
theme_df  <- dfm(corp_sen, dictionary = theme.lexicon) %>%
dfm_weight(scheme = 'prop') %>%
convert('data.frame')
# List with documents about economy
econ_id <- theme_df %>%
filter(economy > 0.9) %>%
pull(doc_id)
# DFM with econ documents
dfmat_econ <- speech_df %>%
subset(CodigoPronunciamento %in% econ_id) %>%
corpus(docid_field = 'CodigoPronunciamento', text_field = 'Pronunciamento') %>%
dfm(tolower = TRUE,
remove_punct = TRUE,
remove = stopwords('portuguese'),
remove_numbers = TRUE,
remove_separators = TRUE,
remove_symbols = TRUE,
stem = FALSE,
groups = 'Partido')
# Wordfish for econ
dfmat_econ[20, 1]
dfmat_econ[11, 1]
wf_econ <- textmodel_wordfish(dfmat_econ, dir = c(20, 11), sparse = TRUE)
textplot_scale1d(wf_econ)
# Features usage left/right
feat_econ <- data.frame(
word = wf_econ$features,
beta = wf_econ$beta,
psi = wf_econ$psi,
stringsAsFactors = FALSE)
# Graph top 30 psi per beta
feat_econ %>%
top_n(30, psi) %>%  # word fixed-effects
ggplot(aes(x = beta, y = psi, label = word)) +
geom_point() +
geom_text_repel() +
theme_classic()
# Left
econ_t <- feat_econ %>%
top_n(-20, beta)
# Right
econ_r <- feat_econ %>%
top_n(20, beta)
rbind(econ_t, econ_r) %>%
arrange(beta) %>%
mutate(word = factor(word, levels = word)) %>%
ggplot(aes(x = word, y = beta)) +
geom_col() +
coord_flip() +
theme_classic()
textplot_keyness(textstat_keyness(dfmat_econ, target = dfmat_sen$Partido == 'PR'))
# List with documents about gender and family
genfam <- theme_df %>%
filter(genfam > 0.8) %>%
pull(doc_id)
# DFM with social documents
dfmat_genfam <- speech_df %>%
subset(CodigoPronunciamento %in% social_id) %>%
corpus(docid_field = 'CodigoPronunciamento', text_field = 'Pronunciamento') %>%
dfm(tolower = TRUE,
remove_punct = TRUE,
remove = stopwords('portuguese'),
remove_numbers = TRUE,
remove_separators = TRUE,
remove_symbols = TRUE,
stem = FALSE,
groups = 'Partido')
# DFM with social documents
dfmat_genfam <- speech_df %>%
subset(CodigoPronunciamento %in% genfam_id) %>%
corpus(docid_field = 'CodigoPronunciamento', text_field = 'Pronunciamento') %>%
dfm(tolower = TRUE,
remove_punct = TRUE,
remove = stopwords('portuguese'),
remove_numbers = TRUE,
remove_separators = TRUE,
remove_symbols = TRUE,
stem = FALSE,
groups = 'Partido')
# List with documents about gender and family
genfam_id <- theme_df %>%
filter(genfam > 0.9) %>%
pull(doc_id)
# DFM with econ documents
dfmat_genfam <- speech_df %>%
subset(CodigoPronunciamento %in% genfam_id) %>%
corpus(docid_field = 'CodigoPronunciamento', text_field = 'Pronunciamento') %>%
dfm(tolower = TRUE,
remove_punct = TRUE,
remove = stopwords('portuguese'),
remove_numbers = TRUE,
remove_separators = TRUE,
remove_symbols = TRUE,
stem = FALSE,
groups = 'Partido')
# Wordfish for econ
dfmat_genfam[20, 1]
dfmat_genfam[11, 1]
wf_genfam <- textmodel_wordfish(dfmat_genfam, dir = c(20, 11), sparse = TRUE)
textplot_scale1d(wf_genfam)
# Features usage left/right
feat_genfam <- data.frame(
word = wf_genfam$features,
beta = wf_genfam$beta,
psi = wf_genfam$psi,
stringsAsFactors = FALSE)
# Graph top 30 psi per beta
feat_genfam %>%
top_n(30, psi) %>%  # word fixed-effects
ggplot(aes(x = beta, y = psi, label = word)) +
geom_point() +
geom_text_repel() +
theme_classic()
# Right
econ_r <- feat_econ %>%
top_n(20, beta)
# Left
genfam_t <- feat_genfam %>%
top_n(-20, beta)
# Right
genfam_r <- feat_genfam %>%
top_n(20, beta)
rbind(genfam_t, genfam_r) %>%
arrange(beta) %>%
mutate(word = factor(word, levels = word)) %>%
ggplot(aes(x = word, y = beta)) +
geom_col() +
coord_flip() +
theme_classic()
textplot_keyness(textstat_keyness(dfmat_genfam, target = dfmat_sen$Partido == 'PR'))
View(wiki_partidos)
textplot_keyness(textstat_keyness(dfmat_econ, target = dfmat_econ$Partido == 'PR'))
textplot_keyness(textstat_keyness(dfmat_genfam, target = dfmat_genfam$Partido == 'PT'))
# Table with party position from external sources
load('../tada/data/wiki_partidos.Rda')
wiki_partidos %>%
DT::datatable()
